<section class="phx-hero">
  <h1>Welcome to Wax!</h1>
  <%= if @login do %>
    <p>Hello <em><%= @login %></em>!</p>
  <% else %>
    <p>Hello!</p>
  <% end %>
  <%= if @with_webauthn do %>
  <button id="safari-button" style="display:none" onclick="triggerAuthenticate()">Authenticate</button>
  <img id="auth-img" src="<%= Routes.static_path(@conn, "/images/fingerprint-scanning.svg") %>"/><br/>
  <%= if @login do %>
    <p><em><%= String.capitalize(@login) %></em>, press your authenticator now!</p>
  <% else %>
    <p>Press your authenticator now!</p>
  <% end %>
  <% end %>
</section>

<section>
  <p>
  <%= form_for @conn, Routes.credential_path(@conn, :index), [as: :password], fn f -> %>
    <%= if @with_webauthn do %>
      or enter your password:
    <% else %>
      Enter your password:
    <% end %>
    <%= password_input f, :password %>
    <%= hidden_input f, :webauthn_support, id: "webauthn_support" %>
    <%= submit "Next" %>
  <% end %>
  <small>Try `123456` ;)</small><br/>

  <%= form_for @conn, Routes.credential_path(@conn, :index), [as: :webauthn, id: "waf"], fn f -> %>
    <%= hidden_input f, :rawID, id: "rawID" %>
    <%= hidden_input f, :type, id: "type" %>
    <%= hidden_input f, :clientDataJSON, id: "clientDataJSON" %>
    <%= hidden_input f, :authenticatorData, id: "authenticatorData" %>
    <%= hidden_input f, :sig, id: "sig" %>
    <%= hidden_input f, :userHandle, id: "userHandle" %>
  <% end %>
  </p>
  <script>
    document.getElementById("webauthn_support").value =
      typeof(PublicKeyCredential) != "undefined"
  </script>
</section>

<section>
  <p style="font-size:0.6em; color: grey">Image from <a style="color: grey"href="https://www.flaticon.com/free-icon/fingerprint-scanning_25930">
  https://www.flaticon.com/free-icon/fingerprint-scanning_25930</a></p>
</section>

<%= if @with_webauthn do %>
<script>
function _arrayBufferToString( buffer ) {
  var binary = '';
  var bytes = new Uint8Array( buffer );
  var len = bytes.byteLength;
  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode( bytes[ i ] );
  }
  return binary;
}

function _arrayBufferToBase64( buffer ) {
  var binary = '';
  var bytes = new Uint8Array( buffer );
  var len = bytes.byteLength;
  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode( bytes[ i ] );
  }
  return window.btoa( binary );
}

function _base64ToArrayBuffer(base64) {
    var binary_string =  window.atob(base64);
    var len = binary_string.length;
    var bytes = new Uint8Array( len );
    for (var i = 0; i < len; i++)        {
        bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes.buffer;
}

function triggerAuthenticate(){
  document.getElementById('safari-button').style.display = 'none';
  document.getElementById('auth-img').style.display = 'inline';

  navigator.credentials.get({
    publicKey: {
      challenge: _base64ToArrayBuffer("<%= @challenge %>"),

      allowCredentials: [
      <%= for cred_id <- @cred_ids do %>
        {
          id: _base64ToArrayBuffer("<%= cred_id %>"),
          type: "public-key"
        },
      <% end %>
      ]
    }
  }).then(function (newCredential) {
    document.getElementById('rawID').value = _arrayBufferToBase64(newCredential.rawId);
    document.getElementById('type').value = newCredential.type;
    document.getElementById('clientDataJSON').value =
      _arrayBufferToString(newCredential.response.clientDataJSON)
    document.getElementById('authenticatorData').value =
      _arrayBufferToBase64(newCredential.response.authenticatorData)
    document.getElementById('sig').value =
      _arrayBufferToBase64(newCredential.response.signature)
    if(newCredential.response.userHandle){
      document.getElementById('userHandle').value =
        _arrayBufferToBase64(newCredential.response.userHandle)
      }

    document.getElementById('waf').submit();
  }).catch((err) => {
    if(err.name == 'NotAllowedError') {
        document.getElementById('safari-button').style.display = 'inline-block';
        document.getElementById('auth-img').style.display = 'none';
      }
    else {
        console.log(err);
      }
  });
}

triggerAuthenticate()
</script>
<% end %>
